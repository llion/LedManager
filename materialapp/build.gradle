apply plugin: 'com.android.application'
//wrap with try and catch so the build is working even if the signing stuff is missing
//try {
//    apply from: '../../../signing.gradle'
//} catch (ex) {
//}

android {
    compileSdkVersion 23
    buildToolsVersion '25.0.0'

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
    }
    signingConfigs {
        release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }
    defaultConfig {
        applicationId "com.clt.ledmanager"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 500
        versionName "5.0.0"

    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def appName = "LedManager"
            def newName = output.outputFile.name
            newName = newName.replace("app-", "$appName-")
            output.outputFile = new File(
                    output.outputFile.parent,
                    newName.replace(".apk", "-v${variant.versionName}.${variant.versionCode}.apk"))
        }
    }





    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-DEBUG"
//            try {
            signingConfig signingConfigs.debug
//            } catch (ex) {
//            }
            minifyEnabled false
        }
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
//            try {
            signingConfig signingConfigs.release
//            } catch (ex) {
//            }
            zipAlignEnabled true
            minifyEnabled false
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    compile project(':library')
    compile 'com.android.support:support-v4:23.0.1'
    compile 'com.android.support:appcompat-v7:23.0.1'
    compile 'com.android.support:recyclerview-v7:23.0.1'
    compile 'com.android.support:support-annotations:23.0.1'
    compile 'com.google.code.gson:gson:2.2.2'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.github.bumptech.glide:glide:3.6.1'
    compile('com.mikepenz:aboutlibraries:5.2.3@aar') {
        transitive = true
    }
    compile 'com.mikepenz:crossfader:1.0.5@aar'
    compile 'com.mikepenz:google-material-typeface:1.2.0.1@aar'
    compile 'com.mikepenz:fontawesome-typeface:4.4.0.1@aar'
    compile 'com.mikepenz:octicons-typeface:3.0.0.1@aar'
    compile project(':ledCommonLib')
    compile project(':ZXingLib')
    compile files('libs/commons-net-3.3.jar')
    compile files('libs/dom4j-1.6.1.jar')
    compile files('libs/jdom.jar')
    //    compile('com.mikepenz:materialdrawer:4.0.2@aar') {

    //        transitive = true

    //    }
    compile project(':ZXingLib')
    compile project(':ledCommonLib')
    compile 'com.github.bumptech.glide:glide:3.6.1'
    compile('com.mikepenz:aboutlibraries:5.2.3@aar') {
        transitive = true
    }
    compile 'com.mikepenz:crossfader:1.0.5@aar'
    compile 'com.mikepenz:google-material-typeface:1.2.0.1@aar'
    compile 'com.mikepenz:fontawesome-typeface:4.4.0.1@aar'
    compile 'com.mikepenz:octicons-typeface:3.0.0.1@aar'
    compile 'com.nhaarman.listviewanimations:lib-manipulation:3.1.0'
    compile 'com.nhaarman.listviewanimations:lib-core:3.1.0'
    //compile files('libs/systembartint-1.0.4.jar')
}
